#Run LM DA functions
INF_TABn_res<-INF_lm_da(INF_TABn, batch_var=INF_TABn$Batch, group_var=factor(INF_TABn$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
CDM_TABn_res<-CDM_lm_da(CDM_TABn, factor(CDM_TABn$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
#Run Combine_res functions and write results to file
TABn_res<-combine_res(INF_TABn_res, CDM_TABn_res)
summary(as.factor(TABn_res$Significance))
write.csv(TABn_res,paste0(TABn_NGCA_DIR,"/C-GCA TAB- vs Not C-GCA DA Results.csv"))
#Run volcano function and save figure
TABn_volcano<-create_volcano_plot(TABn_res, "C-GCA TAB- vs Not C-GCA")
TABn_volcano
ggsave("C-GCA TAB- vs Not C-GCA Volcano.png",path=TABn_NGCA_DIR, plot = TABn_volcano, width = 5.5, height = 6, dpi = 300)
# Extra Analyses --------------------------------------
####C-GCA cases with TAB- & USS+  vs Not C-GCA====
#To further explore whether temporal artery ultrasound might stratify the TAB- C-GCA cases, we opted to additionally compare these cases to Not C-GCA controls
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_TABnUSSp<-INF_meta %>% select(Subgroup,Batch,USS) %>% bind_cols(INF_NPX) %>% filter(Subgroup=="Not_C-GCA"| (Subgroup == "C-GCA TAB-" & USS == "Positive"))
table(as.factor(INF_TABnUSSp$USS), as.factor(INF_TABnUSSp$Subgroup)) #check subset result with Table
INF_TABnUSSp<-INF_TABnUSSp %>% select(-USS) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABnUSSp<-CDM_meta %>% select(Subgroup,USS) %>% bind_cols(CDM_NPX) %>% filter(Subgroup=="Not_C-GCA"| (Subgroup == "C-GCA TAB-" & USS == "Positive"))
table(as.factor(CDM_TABnUSSp$USS), as.factor(CDM_TABnUSSp$Subgroup)) #check subset result with Table
CDM_TABnUSSp<-CDM_TABnUSSp %>% select(-USS) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABnUSSp_res<-INF_lm_da(INF_TABnUSSp, batch_var=INF_TABnUSSp$Batch, group_var=factor(INF_TABnUSSp$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
CDM_TABnUSSp_res<-CDM_lm_da(CDM_TABnUSSp, factor(CDM_TABnUSSp$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
#Run Combine_res functions and write results to file
TABnUSSp_res<-combine_res(INF_TABnUSSp_res, CDM_TABnUSSp_res)
summary(as.factor(TABnUSSp_res$Significance))
write.csv(TABnUSSp_res,paste0(TABn_USSp_DIR,"/C-GCA TAB- & USS+ vs Not C-GCA DA Results.csv"))
#No DA proteins, not doing volcano plot
###Cranial ischaemic complications ====
#In secondary analyses, we did not identify any proteins that were significantly associated with cranial ischaemic complications or polymyalgic symptoms within C-GCA patients when analysed both as a single group and when separated by TAB result.
###### All C-GCA -----
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_all_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp) %>% bind_cols(INF_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(INF_all_CIC$Diagnosis), as.factor(INF_all_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_all_CIC<-INF_all_CIC %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
CDM_all_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(CDM_all_CIC$Diagnosis), as.factor(CDM_all_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_all_CIC<-CDM_all_CIC %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_all_CIC_res<-INF_lm_da(INF_all_CIC, batch_var=INF_all_CIC$Batch, group_var=factor(INF_all_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_all_CIC_res<-CDM_lm_da(CDM_all_CIC, factor(CDM_all_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
all_CIC_res<-combine_res(INF_all_CIC_res, CDM_all_CIC_res)
summary(as.factor(all_CIC_res$Significance))
write.csv(all_CIC_res,paste0(CIC_DIR,"/All C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB+ C-GCA -----
INF_TABp_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp, TAB) %>% bind_cols(INF_NPX) %>% filter(TAB=="Positive")
table(as.factor(INF_TABp_CIC$TAB), as.factor(INF_TABp_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_TABp_CIC<-INF_TABp_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABp_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp,TAB) %>% bind_cols(CDM_NPX) %>% filter(TAB=="Positive")
table(as.factor(CDM_TABp_CIC$TAB), as.factor(CDM_TABp_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_TABp_CIC<-CDM_TABp_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABp_CIC_res<-INF_lm_da(INF_TABp_CIC, batch_var=INF_TABp_CIC$Batch, group_var=factor(INF_TABp_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_TABp_CIC_res<-CDM_lm_da(CDM_TABp_CIC, factor(CDM_TABp_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABp_CIC_res<-combine_res(INF_TABp_CIC_res, CDM_TABp_CIC_res)
summary(as.factor(TABp_CIC_res$Significance))
write.csv(TABp_CIC_res,paste0(CIC_DIR,"/TAB+ C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB- C-GCA -----
INF_TABn_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp, TAB) %>% bind_cols(INF_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(INF_TABn_CIC$TAB), as.factor(INF_TABn_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_TABn_CIC<-INF_TABn_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABn_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp,TAB) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(CDM_TABn_CIC$TAB), as.factor(CDM_TABn_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_TABn_CIC<-CDM_TABn_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABn_CIC_res<-INF_lm_da(INF_TABn_CIC, batch_var=INF_TABn_CIC$Batch, group_var=factor(INF_TABn_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_TABn_CIC_res<-CDM_lm_da(CDM_TABn_CIC, factor(CDM_TABn_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABn_CIC_res<-combine_res(INF_TABn_CIC_res, CDM_TABn_CIC_res)
summary(as.factor(TABn_CIC_res$Significance))
write.csv(TABn_CIC_res,paste0(CIC_DIR,"/TAB- C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###Polymyalgic Symptoms ====
###### All C-GCA -----
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_all_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR) %>% bind_cols(INF_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(INF_all_PMR$Diagnosis), as.factor(INF_all_PMR$PMR)) #check subset result with Table
INF_all_PMR<-INF_all_PMR %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
CDM_all_PMR<-CDM_meta %>% select(Diagnosis,PMR) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(CDM_all_PMR$Diagnosis), as.factor(CDM_all_PMR$PMR)) #check subset result with Table
CDM_all_PMR<-CDM_all_PMR %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_all_PMR_res<-INF_lm_da(INF_all_PMR, batch_var=INF_all_PMR$Batch, group_var=factor(INF_all_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_all_PMR_res<-CDM_lm_da(CDM_all_PMR, factor(CDM_all_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
all_PMR_res<-combine_res(INF_all_PMR_res, CDM_all_PMR_res)
summary(as.factor(all_PMR_res$Significance))
write.csv(all_PMR_res,paste0(PMR_DIR,"/All C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB+ C-GCA -----
INF_TABp_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR, TAB) %>% bind_cols(INF_NPX) %>% filter(TAB=="Positive")
table(as.factor(INF_TABp_PMR$TAB), as.factor(INF_TABp_PMR$PMR)) #check subset result with Table
INF_TABp_PMR<-INF_TABp_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABp_PMR<-CDM_meta %>% select(Diagnosis,PMR,TAB) %>% bind_cols(CDM_NPX) %>% filter(TAB=="Positive")
table(as.factor(CDM_TABp_PMR$TAB), as.factor(CDM_TABp_PMR$PMR)) #check subset result with Table
CDM_TABp_PMR<-CDM_TABp_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABp_PMR_res<-INF_lm_da(INF_TABp_PMR, batch_var=INF_TABp_PMR$Batch, group_var=factor(INF_TABp_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_TABp_PMR_res<-CDM_lm_da(CDM_TABp_PMR, factor(CDM_TABp_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABp_PMR_res<-combine_res(INF_TABp_PMR_res, CDM_TABp_PMR_res)
summary(as.factor(TABp_PMR_res$Significance))
write.csv(TABp_PMR_res,paste0(PMR_DIR,"/TAB+ C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB- C-GCA -----
INF_TABn_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR, TAB) %>% bind_cols(INF_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(INF_TABn_PMR$TAB), as.factor(INF_TABn_PMR$PMR)) #check subset result with Table
INF_TABn_PMR<-INF_TABn_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABn_PMR<-CDM_meta %>% select(Diagnosis,PMR,TAB) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(CDM_TABn_PMR$TAB), as.factor(CDM_TABn_PMR$PMR)) #check subset result with Table
CDM_TABn_PMR<-CDM_TABn_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABn_PMR_res<-INF_lm_da(INF_TABn_PMR, batch_var=INF_TABn_PMR$Batch, group_var=factor(INF_TABn_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_TABn_PMR_res<-CDM_lm_da(CDM_TABn_PMR, factor(CDM_TABn_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABn_PMR_res<-combine_res(INF_TABn_PMR_res, CDM_TABn_PMR_res)
summary(as.factor(TABn_PMR_res$Significance))
write.csv(TABn_PMR_res,paste0(PMR_DIR,"/TAB- C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
# Functions ---------------------------------------------------------------
####Load Libraries====
libs_load <- function(x){
for( i in x ){
print(paste0("Checking for library: ", i))
if(require( i , character.only = TRUE ) ){
print(paste0(i, " already installed. Loading now"))
}
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
print(paste0(i, " not installed. Trying CRAN for install."))
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
require( i , character.only = TRUE )
paste0(i, " installed and loaded successfully")
}
if ( ! require(i, character.only=TRUE) ) {
paste0(i," could not be installed from CRAN. Trying Bionconductor....")
BiocManager::install(i)
require( i , character.only = TRUE )
paste0(i, " installed and loaded successfully")
}
if ( ! require(i, character.only=TRUE) ) {
paste0(i, "could not be installed. Check manually")
}
#  Load package after installing
}
}
#Usage:
#libs_load(c("...", "..."))
#### Inflammation differential abundance LM function ----
#INCLUDES BATCH CORRECTION. Grouping variable for testing must be in the second column and ideally be a 2 level factor
#Can be modified for different designs
INF_lm_da<-function(data, batch_var, group_var){
lmfit <- vector('list', ncol(data)-2)
names(lmfit) <- colnames(data)[-c(1,2)]
for(i in 2:(ncol(data)-1)){
lmfit[[i-1]] <- summary(lm(data[,i+1]~batch_var+group_var))$coefficients
}
LM_res<-data.frame(
Protein = character(0),
Estimate = numeric(0),
Std.Error = numeric(0),
T.Value = numeric(0),
Pval = numeric(0)
)
for (i in seq_along(lmfit)) {
# Extract relevant information from 3rd column (second is effect of batch)
protein_name <- names(lmfit)[i]
x<-lmfit[[i]]
Est <- x[3,1]
SD <- x[3,2]
Tval <- x[3,3]
P <- x[3,4]
LM_res <- rbind(LM_res, data.frame(
Protein = protein_name,
Estimate = Est,
Std.Error = SD,
T.Value = Tval,
Pval = P
))
}
return(LM_res)
}
#### Cardiometabolic differential abundance LM function ----
#INCLUDES BATCH CORRECTION. Grouping variable for testing must be in the second column and ideally be a 2 level factor
#Can be modified for different designs
CDM_lm_da<-function(data, group_var){
lmfit <- vector('list', ncol(data)-1)
names(lmfit) <- colnames(data)[-1]
for (i in 1:(ncol(data)-1)){
lmfit[[i]] <- summary(lm(data[,i+1]~group_var))$coefficients
}
LM_res<-data.frame(
Protein = character(0),
Estimate = numeric(0),
Std.Error = numeric(0),
T.Value = numeric(0),
Pval = numeric(0)
)
for (i in seq_along(lmfit)) {
# Extract relevant information
protein_name <- names(lmfit)[i]
x<-lmfit[[i]]
Est <- x[2,1]
SD <- x[2,2]
Tval <- x[2,3]
P <- x[2,4]
LM_res <- rbind(LM_res, data.frame(
Protein = protein_name,
Estimate = Est,
Std.Error = SD,
T.Value = Tval,
Pval = P
))
}
return(LM_res)
}
#### Combine Results & BH Adjust function ----
combine_res <- function(INF_res, CDM_res) {
# Combine the two data frames
combined <- rbind(INF_res, CDM_res)
# Adjust p-values using the Benjamini-Hochberg method
combined$Pval.bh <- p.adjust(combined$Pval, method = "BH")
# Order the data frame by p-value and estimate
combined <- combined[order(combined$Pval, -combined$Estimate), ]
# Add a significance column based on the adjusted p-values
combined$Significance <- ifelse(combined$Pval.bh < 0.05, "DE", "Not DE")
return(combined)
}
#### Create Volcano Plot Function ----
#this function expects the output from the lm_da funciton and will return a ggplot volcano plot, requires above packages
create_volcano_plot <- function(data, title) {
data <- data %>%
mutate(LogP = -log10(Pval.bh),
Colour = case_when(
Significance == "Not DE" ~ "Not Significant",
Significance == "DE" & Estimate > 0 ~ "Upregulated P.adj<0.05",
Significance == "DE" & Estimate < 0 ~ "Downregulated P.adj<0.05"
))
plot <- ggplot(data, aes(x = Estimate, y = LogP, colour = factor(Colour, levels = c("Not Significant", "Downregulated P.adj<0.05", "Upregulated P.adj<0.05")))) +
geom_point(size = 3, alpha = 0.5, shape = 16) +
scale_colour_manual(values = c("black", "blue", "red")) +
ylab("-log10(P.adj)") +
xlab("Log2 Fold Change") +
labs(colour = "Adjusted P value", y = expression(-Log10(P["adj"]))) +
ggtitle(title) +
theme_classic() +
geom_text_repel(data = subset(data, Pval.bh < 0.05), aes(label = Protein), size = 3, colour = "black") +
geom_vline(xintercept = 0, linetype = "solid", color = "grey") +
geom_hline(yintercept = 1.3, linetype = "dashed", color = "grey") +
guides(color = "none") +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
return (plot)
}
# Libraries ---------------------------------------------------------------
libs_load(c("tidyr", "tidyverse", "pheatmap", "factoextra", "FactoMineR", "dplyr", "ggplot2","ggrepel", "this.path"))
# Set up file paths & output directories  ------------------------------------------------------------
# Root
setwd(this.path::here())
DA_ROOT= this.path::here()
# Input
INPUT_DIR<-paste0(DA_ROOT, "/Input_Data")
# Output directories
OUTPUT_DIR <- paste0(DA_ROOT, "/Output")
# Check if the Output directory exists (Avoids overwriting)
if (!dir.exists(OUTPUT_DIR)) {
# If it doesn't exist, create the directory
dir.create(OUTPUT_DIR, recursive = TRUE)
message("Directory created: ", OUTPUT_DIR)
} else {
message("Directory already exists: ", OUTPUT_DIR)
}
#Directory for All CGCA vs NGCA
CGCA_NGCA_DIR <- paste0(OUTPUT_DIR, "/CGCA_Not-CGCA")
if (!dir.exists(CGCA_NGCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(CGCA_NGCA_DIR, recursive = TRUE)
message("Directory created: ", CGCA_NGCA_DIR)
} else {
message("Directory already exists: ", CGCA_NGCA_DIR)
}
#Directory for TAB+ CGCA vs NGCA
TABp_NGCA_DIR <- paste0(OUTPUT_DIR, "/TAB+_Not-CGCA")
if (!dir.exists(TABp_NGCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(TABp_NGCA_DIR, recursive = TRUE)
message("Directory created: ", TABp_NGCA_DIR)
} else {
message("Directory already exists: ", TABp_NGCA_DIR)
}
#Directory for TAB- CGCA vs NGCA
TABn_NGCA_DIR <- paste0(OUTPUT_DIR, "/TAB-_Not-CGCA")
if (!dir.exists(TABn_NGCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(TABn_NGCA_DIR, recursive = TRUE)
message("Directory created: ", TABn_NGCA_DIR)
} else {
message("Directory already exists: ", TABn_NGCA_DIR)
}
#Directory for TABn & USSp vs NGCA Analyses
TABn_USSp_DIR <- paste0(OUTPUT_DIR, "/Extra_Analyses/TABn&USSp_Not-CGCA")
if (!dir.exists(TABn_USSp_DIR)) {
# If it doesn't exist, create the directory
dir.create(TABn_USSp_DIR, recursive = TRUE)
message("Directory created: ", TABn_USSp_DIR)
} else {
message("Directory already exists: ", TABn_USSp_DIR)
}
#Directory for PMR Analyses
PMR_DIR <- paste0(OUTPUT_DIR, "/Extra_Analyses/PMR_symptoms")
if (!dir.exists(PMR_DIR)) {
# If it doesn't exist, create the directory
dir.create(PMR_DIR, recursive = TRUE)
message("Directory created: ", PMR_DIR)
} else {
message("Directory already exists: ", PMR_DIR)
}
#Directory for PMR Analyses
CIC_DIR <- paste0(OUTPUT_DIR, "/Extra_Analyses/Cranial_Ischaemia")
if (!dir.exists(CIC_DIR)) {
# If it doesn't exist, create the directory
dir.create(CIC_DIR, recursive = TRUE)
message("Directory created: ", CIC_DIR)
} else {
message("Directory already exists: ", CIC_DIR)
}
# Read in Data & set up data frames------------------------------------------------------------
INF <- read.csv(paste0(INPUT_DIR,"/Cohort 2 Post QC Unadjusted Inflammation Panel Data.csv"))
CDM <- read.csv(paste0(INPUT_DIR,"/Cohort 2 Post QC Unadjusted Cardiometabolic Panel Data.csv"))
rownames(INF)<-INF$SampleID
rownames(CDM)<-CDM$SampleID
dim(INF) #check row (Case) numbers
dim(CDM) #check row (Case) numbers
#All NA values in these datasets have complete missingness for each panel. I.E. if NA, all proteins in panel are NA.
#Omit NA cases for DA analysis
INF_NArm<-na.omit(INF)
CDM_NArm<-na.omit(CDM)
dim(INF_NArm) #check row numbers
dim(CDM_NArm) #check row numbers
INF_NPX<-INF_NArm[,14:ncol(INF)]
CDM_NPX<-CDM_NArm[,13:ncol(CDM)]
INF_meta<-INF_NArm[,1:14]
CDM_meta<-CDM_NArm[,1:13]
# All C-GCA vs Not C-GCA (Figure 4A & Table S10 ) --------------------------------------
#Create INF and CDM DFs for all case vs control analysis
INF_allCases<-INF_meta %>% select(Diagnosis,Batch) %>% bind_cols(INF_NPX)
summary(as.factor(INF_allCases$Diagnosis))
CDM_allCases<-CDM_meta %>% select(Diagnosis) %>% bind_cols(CDM_NPX)
summary(as.factor(CDM_allCases$Diagnosis))
#Run LM DA functions
INF_allCases_res<-INF_lm_da(INF_allCases, batch_var=INF_allCases$Batch, group_var=factor(INF_allCases$Diagnosis,levels=c("Not_C-GCA","C-GCA"))) #Run the function
CDM_allCases_res<-CDM_lm_da(CDM_allCases, factor(CDM_allCases$Diagnosis, levels=c("Not_C-GCA","C-GCA"))) #Run the function
#Run Combine_res functions and write results to file
allCases_res<-combine_res(INF_allCases_res,CDM_allCases_res)
summary(as.factor(allCases_res$Significance))
write.csv(allCases_res,paste0(CGCA_NGCA_DIR,"/All C-GCA vs Not C-GCA DA Results.csv"))
#Run volcano function and save figure
allCases_volcano<-create_volcano_plot(allCases_res, "C-GCA vs Not C-GCA")
allCases_volcano
ggsave("Fig4A All C-GCA vs Not C-GCA Volcano.png",path=CGCA_NGCA_DIR, plot = allCases_volcano, width = 4, height = 6, dpi = 300)
# TAB+ C-GCA vs Not C-GCA (Figure 4B & Table S11) --------------------------------------
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_TABp<-INF_meta %>% select(Subgroup,Batch) %>% bind_cols(INF_NPX) %>% filter(Subgroup=="Not_C-GCA"| Subgroup == "C-GCA TAB+")
summary(as.factor(INF_TABp$Subgroup))
CDM_TABp<-CDM_meta %>% select(Subgroup) %>% bind_cols(CDM_NPX) %>% filter(Subgroup=="Not_C-GCA"| Subgroup == "C-GCA TAB+")
summary(as.factor(CDM_TABp$Subgroup))
#Run LM DA functions
INF_TABp_res<-INF_lm_da(INF_TABp, batch_var=INF_TABp$Batch, group_var=factor(INF_TABp$Subgroup, levels=c("Not_C-GCA", "C-GCA TAB+")) ) #Run the function
CDM_TABp_res<-CDM_lm_da(CDM_TABp, factor(CDM_TABp$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB+"))) #Run the function
#Run Combine_res functions and write results to file
TABp_res<-combine_res(INF_TABp_res, CDM_TABp_res)
summary(as.factor(TABp_res$Significance))
write.csv(TABp_res,paste0(TABp_NGCA_DIR,"/C-GCA TAB+ vs Not C-GCA DA Results.csv"))
#Run volcano function and save figure
TABp_volcano<-create_volcano_plot(TABp_res, "C-GCA TAB+ vs Not C-GCA")
TABp_volcano
ggsave("Fig4B C-GCA TAB+ vs Not C-GCA Volcano.png", path=TABp_NGCA_DIR,plot = TABp_volcano, width = 5.5, height = 6, dpi = 300)
# TAB- C-GCA vs Not C-GCA (Table S12) --------------------------------------
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_TABn<-INF_meta %>% select(Subgroup,Batch) %>% bind_cols(INF_NPX) %>% filter(Subgroup=="Not_C-GCA"| Subgroup == "C-GCA TAB-")
summary(as.factor(INF_TABn$Subgroup))
CDM_TABn<-CDM_meta %>% select(Subgroup) %>% bind_cols(CDM_NPX) %>% filter(Subgroup=="Not_C-GCA"| Subgroup == "C-GCA TAB-")
summary(as.factor(CDM_TABn$Subgroup))
#Run LM DA functions
INF_TABn_res<-INF_lm_da(INF_TABn, batch_var=INF_TABn$Batch, group_var=factor(INF_TABn$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
CDM_TABn_res<-CDM_lm_da(CDM_TABn, factor(CDM_TABn$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
#Run Combine_res functions and write results to file
TABn_res<-combine_res(INF_TABn_res, CDM_TABn_res)
summary(as.factor(TABn_res$Significance))
write.csv(TABn_res,paste0(TABn_NGCA_DIR,"/C-GCA TAB- vs Not C-GCA DA Results.csv"))
#Run volcano function and save figure
TABn_volcano<-create_volcano_plot(TABn_res, "C-GCA TAB- vs Not C-GCA")
TABn_volcano
ggsave("C-GCA TAB- vs Not C-GCA Volcano.png",path=TABn_NGCA_DIR, plot = TABn_volcano, width = 5.5, height = 6, dpi = 300)
# Extra Analyses --------------------------------------
####C-GCA cases with TAB- & USS+  vs Not C-GCA====
#To further explore whether temporal artery ultrasound might stratify the TAB- C-GCA cases, we opted to additionally compare these cases to Not C-GCA controls
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_TABnUSSp<-INF_meta %>% select(Subgroup,Batch,USS) %>% bind_cols(INF_NPX) %>% filter(Subgroup=="Not_C-GCA"| (Subgroup == "C-GCA TAB-" & USS == "Positive"))
table(as.factor(INF_TABnUSSp$USS), as.factor(INF_TABnUSSp$Subgroup)) #check subset result with Table
INF_TABnUSSp<-INF_TABnUSSp %>% select(-USS) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABnUSSp<-CDM_meta %>% select(Subgroup,USS) %>% bind_cols(CDM_NPX) %>% filter(Subgroup=="Not_C-GCA"| (Subgroup == "C-GCA TAB-" & USS == "Positive"))
table(as.factor(CDM_TABnUSSp$USS), as.factor(CDM_TABnUSSp$Subgroup)) #check subset result with Table
CDM_TABnUSSp<-CDM_TABnUSSp %>% select(-USS) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABnUSSp_res<-INF_lm_da(INF_TABnUSSp, batch_var=INF_TABnUSSp$Batch, group_var=factor(INF_TABnUSSp$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
CDM_TABnUSSp_res<-CDM_lm_da(CDM_TABnUSSp, factor(CDM_TABnUSSp$Subgroup,levels= c("Not_C-GCA", "C-GCA TAB-"))) #Run the function
#Run Combine_res functions and write results to file
TABnUSSp_res<-combine_res(INF_TABnUSSp_res, CDM_TABnUSSp_res)
summary(as.factor(TABnUSSp_res$Significance))
write.csv(TABnUSSp_res,paste0(TABn_USSp_DIR,"/C-GCA TAB- & USS+ vs Not C-GCA DA Results.csv"))
#No DA proteins, not doing volcano plot
###Cranial ischaemic complications ====
#In secondary analyses, we did not identify any proteins that were significantly associated with cranial ischaemic complications or polymyalgic symptoms within C-GCA patients when analysed both as a single group and when separated by TAB result.
###### All C-GCA -----
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_all_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp) %>% bind_cols(INF_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(INF_all_CIC$Diagnosis), as.factor(INF_all_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_all_CIC<-INF_all_CIC %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
CDM_all_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(CDM_all_CIC$Diagnosis), as.factor(CDM_all_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_all_CIC<-CDM_all_CIC %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_all_CIC_res<-INF_lm_da(INF_all_CIC, batch_var=INF_all_CIC$Batch, group_var=factor(INF_all_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_all_CIC_res<-CDM_lm_da(CDM_all_CIC, factor(CDM_all_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
all_CIC_res<-combine_res(INF_all_CIC_res, CDM_all_CIC_res)
summary(as.factor(all_CIC_res$Significance))
write.csv(all_CIC_res,paste0(CIC_DIR,"/All C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB+ C-GCA -----
INF_TABp_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp, TAB) %>% bind_cols(INF_NPX) %>% filter(TAB=="Positive")
table(as.factor(INF_TABp_CIC$TAB), as.factor(INF_TABp_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_TABp_CIC<-INF_TABp_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABp_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp,TAB) %>% bind_cols(CDM_NPX) %>% filter(TAB=="Positive")
table(as.factor(CDM_TABp_CIC$TAB), as.factor(CDM_TABp_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_TABp_CIC<-CDM_TABp_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABp_CIC_res<-INF_lm_da(INF_TABp_CIC, batch_var=INF_TABp_CIC$Batch, group_var=factor(INF_TABp_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_TABp_CIC_res<-CDM_lm_da(CDM_TABp_CIC, factor(CDM_TABp_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABp_CIC_res<-combine_res(INF_TABp_CIC_res, CDM_TABp_CIC_res)
summary(as.factor(TABp_CIC_res$Significance))
write.csv(TABp_CIC_res,paste0(CIC_DIR,"/TAB+ C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB- C-GCA -----
INF_TABn_CIC<-INF_meta %>% select(Diagnosis,Batch,Cranial_Isch_Comp, TAB) %>% bind_cols(INF_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(INF_TABn_CIC$TAB), as.factor(INF_TABn_CIC$Cranial_Isch_Comp)) #check subset result with Table
INF_TABn_CIC<-INF_TABn_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABn_CIC<-CDM_meta %>% select(Diagnosis,Cranial_Isch_Comp,TAB) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(CDM_TABn_CIC$TAB), as.factor(CDM_TABn_CIC$Cranial_Isch_Comp)) #check subset result with Table
CDM_TABn_CIC<-CDM_TABn_CIC %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABn_CIC_res<-INF_lm_da(INF_TABn_CIC, batch_var=INF_TABn_CIC$Batch, group_var=factor(INF_TABn_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
CDM_TABn_CIC_res<-CDM_lm_da(CDM_TABn_CIC, factor(CDM_TABn_CIC$Cranial_Isch_Comp,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABn_CIC_res<-combine_res(INF_TABn_CIC_res, CDM_TABn_CIC_res)
summary(as.factor(TABn_CIC_res$Significance))
write.csv(TABn_CIC_res,paste0(CIC_DIR,"/TAB- C-GCA CIC- vs CIC+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###Polymyalgic Symptoms ====
###### All C-GCA -----
#Create INF and CDM DFs for TAB+ case vs control analysis
INF_all_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR) %>% bind_cols(INF_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(INF_all_PMR$Diagnosis), as.factor(INF_all_PMR$PMR)) #check subset result with Table
INF_all_PMR<-INF_all_PMR %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
CDM_all_PMR<-CDM_meta %>% select(Diagnosis,PMR) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis=="C-GCA")
table(as.factor(CDM_all_PMR$Diagnosis), as.factor(CDM_all_PMR$PMR)) #check subset result with Table
CDM_all_PMR<-CDM_all_PMR %>% select(-Diagnosis) #Drop Diagnosis column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_all_PMR_res<-INF_lm_da(INF_all_PMR, batch_var=INF_all_PMR$Batch, group_var=factor(INF_all_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_all_PMR_res<-CDM_lm_da(CDM_all_PMR, factor(CDM_all_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
all_PMR_res<-combine_res(INF_all_PMR_res, CDM_all_PMR_res)
summary(as.factor(all_PMR_res$Significance))
write.csv(all_PMR_res,paste0(PMR_DIR,"/All C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB+ C-GCA -----
INF_TABp_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR, TAB) %>% bind_cols(INF_NPX) %>% filter(TAB=="Positive")
table(as.factor(INF_TABp_PMR$TAB), as.factor(INF_TABp_PMR$PMR)) #check subset result with Table
INF_TABp_PMR<-INF_TABp_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABp_PMR<-CDM_meta %>% select(Diagnosis,PMR,TAB) %>% bind_cols(CDM_NPX) %>% filter(TAB=="Positive")
table(as.factor(CDM_TABp_PMR$TAB), as.factor(CDM_TABp_PMR$PMR)) #check subset result with Table
CDM_TABp_PMR<-CDM_TABp_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABp_PMR_res<-INF_lm_da(INF_TABp_PMR, batch_var=INF_TABp_PMR$Batch, group_var=factor(INF_TABp_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_TABp_PMR_res<-CDM_lm_da(CDM_TABp_PMR, factor(CDM_TABp_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABp_PMR_res<-combine_res(INF_TABp_PMR_res, CDM_TABp_PMR_res)
summary(as.factor(TABp_PMR_res$Significance))
write.csv(TABp_PMR_res,paste0(PMR_DIR,"/TAB+ C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
###### TAB- C-GCA -----
INF_TABn_PMR<-INF_meta %>% select(Diagnosis,Batch,PMR, TAB) %>% bind_cols(INF_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(INF_TABn_PMR$TAB), as.factor(INF_TABn_PMR$PMR)) #check subset result with Table
INF_TABn_PMR<-INF_TABn_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
CDM_TABn_PMR<-CDM_meta %>% select(Diagnosis,PMR,TAB) %>% bind_cols(CDM_NPX) %>% filter(Diagnosis =="C-GCA" & TAB=="Negative")
table(as.factor(CDM_TABn_PMR$TAB), as.factor(CDM_TABn_PMR$PMR)) #check subset result with Table
CDM_TABn_PMR<-CDM_TABn_PMR %>% select(-Diagnosis,-TAB) #Drop USS column as not needed and DA function not expecting 3 metadata cols
#Run LM DA functions
INF_TABn_PMR_res<-INF_lm_da(INF_TABn_PMR, batch_var=INF_TABn_PMR$Batch, group_var=factor(INF_TABn_PMR$PMR,levels= c("No", "Yes"))) #Run the function
CDM_TABn_PMR_res<-CDM_lm_da(CDM_TABn_PMR, factor(CDM_TABn_PMR$PMR,levels= c("No", "Yes"))) #Run the function
#Run Combine_res functions and write results to file
TABn_PMR_res<-combine_res(INF_TABn_PMR_res, CDM_TABn_PMR_res)
summary(as.factor(TABn_PMR_res$Significance))
write.csv(TABn_PMR_res,paste0(PMR_DIR,"/TAB- C-GCA PMR- vs PMR+ DA Results.csv"))
#No DA proteins, not doing volcano plot
