# Create an empty data frame to store the adjusted values
adjusted_data <- data.frame(matrix(nrow = nrow(data), ncol = length(names(lmfit))))
colnames(adjusted_data) <- names(lmfit)
rownames(adjusted_data) <- rownames(data)
# Fill the adjusted data frame with the residuals
for (i in seq_along(lmfit)) {
adjusted_data[, i] <- lmfit[[i]]
}
# Re-add the metadata columns to the adjusted data frame
adjusted_data <- cbind(data[, metadata_cols], adjusted_data)
return(adjusted_data)
}
# Example usage: adjusted_data <- adjust_batch_effect(INF_df, batch_col = "Batch", metadata_cols = c("SampleID", "PlateID", "Batch"))
# Assuming 'INF_df' is your data frame
# Libraries  ------------------------------------------------------------
libs_load(c("OlinkAnalyze", "tidyverse", "FactoMineR", "factoextra", "gridExtra", "RColorBrewer", "ggplot","grid", "this.path"))
libs_load(c("OlinkAnalyze", "tidyverse", "FactoMineR", "factoextra", "gridExtra", "RColorBrewer", "ggplot2","grid", "this.path"))
# Root
setwd(this.path::here())
QC_ROOT= this.path::here()
# Input
INPUT_DIR<-paste0(QC_ROOT, "/Input_Data")
# Output directories
OUTPUT_DIR <- paste0(QC_ROOT, "/Output")
# Check if the Output directory exists (Avoids overwriting)
if (!dir.exists(OUTPUT_DIR)) {
# If it doesn't exist, create the directory
dir.create(OUTPUT_DIR, recursive = TRUE)
message("Directory created: ", OUTPUT_DIR)
} else {
message("Directory already exists: ", OUTPUT_DIR)
}
#Directory for investigating possible batch Inflammation Batch Effect
INF_PRE_DIR <- paste0(OUTPUT_DIR, "/INF_Pre_BatchAdjust")
if (!dir.exists(INF_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(INF_PRE_DIR, recursive = TRUE)
message("Directory created: ", INF_PRE_DIR)
} else {
message("Directory already exists: ", INF_PRE_DIR)
}
#Directory for confirming nil Cardiometabolic Batch Effect
CDM_PRE_DIR <- paste0(OUTPUT_DIR, "/CDM_Pre_BatchAdjust")
if (!dir.exists(CDM_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(CDM_PRE_DIR, recursive = TRUE)
message("Directory created: ", CDM_PRE_DIR)
} else {
message("Directory already exists: ", CDM_PRE_DIR)
}
#Directory for INF & CDM Combined QC
BOTH_POST_DIR <- paste0(OUTPUT_DIR, "/INF&CDM_post_BatchAdjust")
if (!dir.exists(BOTH_POST_DIR)) {
# If it doesn't exist, create the directory
dir.create(BOTH_POST_DIR, recursive = TRUE)
message("Directory created: ", BOTH_POST_DIR)
} else {
message("Directory already exists: ", BOTH_POST_DIR)
}
##INF & CDM Combined QC PCAs
POST_PCA_DIR <- paste0(BOTH_POST_DIR, "/PCA")
if (!dir.exists(POST_PCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_PCA_DIR, recursive = TRUE)
message("Directory created: ", POST_PCA_DIR)
} else {
message("Directory already exists: ", POST_PCA_DIR)
}
##INF & CDM Combined QC RLEs
POST_RLE_DIR <- paste0(BOTH_POST_DIR, "/RLE")
if (!dir.exists(POST_RLE_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_RLE_DIR, recursive = TRUE)
message("Directory created: ", POST_RLE_DIR)
} else {
message("Directory already exists: ", POST_RLE_DIR)
}
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort1_INF_Plate1_Raw.xlsx"))
INF_p2to4<-read_NPX(paste0(INPUT_DIR,"/Cohort2_CDM_Plate2to4_Raw.xlsx"))
Olink_Assays <- read.csv(paste0(INPUT_DIR,"/Olink_Assays.csv"))
#Check sample numbers in each
INF_p1 %>% distinct(SampleID) %>% nrow()
INF_p2to4 %>% distinct(SampleID) %>% nrow()
INF_raw<- bind_rows(INF_p1, INF_p2to4)
INF_raw %>% distinct(SampleID) %>% nrow()
#add gene symbols
INF_raw<-INF_raw %>% left_join(Olink_Assays, by = "Assay")
#Remove internal PP, IPC and Neg controls (used in Olink QC but not needed here)
INF_filt <- INF_filt %>% filter(!str_detect(SampleID, c("PP|IPC|Neg")))
INF_filt <- INF_raw %>% filter(!str_detect(SampleID, c("PP|IPC|Neg")))
#Remove any control assays, these are used by Olink analyze software but are not needed by us
INF_filt <- INF_filt %>% filter(!str_detect(Assay, "Ctrl"))#Remove internal controls
INF_filt %>% distinct(SampleID) %>% nrow()
INF_filt%>% distinct(Assay) %>% nrow()
INF_filt%>% distinct(Gene_Symbol) %>% nrow()
#Remove internal PP, IPC and Neg controls (used in Olink QC but not needed here)
INF_filt <- INF_raw %>% filter(!str_detect(SampleID, c("PP|IPC|Neg")))
#Check number of samples and assays in filtered data frame
INF_filt %>% distinct(SampleID) %>% nrow()
View(INF_filt)
INF_p1<-read_NPX('C:/Users/robma/OneDrive - Imperial College London/O-Link_LVV_Project/Final QC and DA Code 021224/Cohort 2/QC/Raw_Data/Q044 GCA INF Plate1_REPEAT_citrate plasma NPX.xlsx')
INF_p2to4<-read_NPX('C:/Users/robma/OneDrive - Imperial College London/O-Link_LVV_Project/Final QC and DA Code 021224/Cohort 2/QC/Raw_Data/Q044 GCA_PMR Inflammation Plates 2 to 4 _NPX.xlsx')
Olink_Assays <- read.csv("C:/Users/robma/OneDrive - Imperial College London/O-Link_LVV_Project/Final QC and DA Code 021224/Olink_Assays.csv")
#Check sample numbers in each
INF_p1 %>% distinct(SampleID) %>% nrow()
INF_p2to4 %>% distinct(SampleID) %>% nrow()
#####Filter out Failed bridging samples from P1 ====
#4 samples were repeated on INF plate 1, in bridging attempt that was not successful (not shown)
#Decision was made to carry out batch correction using linear models and remove these samples from INF Plate 1
INF_p1<-INF_p1 %>% filter(!(SampleID %in% c("12-093","12-030","01-112","10-013")))
####Merge P1 & P2-P4 data frames and add gene symbols ====
INF_raw<- bind_rows(INF_p1, INF_p2to4)
INF_raw %>% distinct(SampleID) %>% nrow()
#add gene symbols
INF_raw<-INF_raw %>% left_join(Olink_Assays, by = "Assay")
####Filter out Un-needed samples & assays ====
#74 samples from unrelated cohorts, read in IDs and remove
Omit_IDs <- read.csv("C:/Users/robma/OneDrive - Imperial College London/O-Link_LVV_Project/Final QC and DA Code 021224/Cohort 2/QC/Omit_IDs.csv")
INF_filt<-INF_raw %>% filter(!(SampleID %in% Omit_IDs$ID))
#14 patients in TABUL discontinued early and had no diagnosis. Remove here
INF_filt<-INF_filt %>% filter(!(SampleID %in% c('01-038','03-012','03-022','12-010','12-042','12-055','12-056','12-058','12-063','17-009','18-007','24-012','24-015','18-006')))
#1 patient (03-005) was sampled at 6 months rather than baseline, remove
INF_filt<-INF_filt %>% filter(!(SampleID %in% c('03-005')))
#Remove internal PP, IPC and Neg controls (used in Olink QC but not needed here)
INF_filt <- INF_filt %>% filter(!str_detect(SampleID, c("PP|IPC|Neg")))
#Remove any control assays, these are used by Olink analyze software but are not needed by us
INF_filt <- INF_filt %>% filter(!str_detect(Assay, "Ctrl"))#Remove internal controls
#Check number of samples and assays in filtered data frame
INF_filt %>% distinct(SampleID) %>% nrow()
INF_filt%>% distinct(Assay) %>% nrow()
INF_filt%>% distinct(Gene_Symbol) %>% nrow()
setwd("C:/Users/robma/OneDrive/Desktop")
write.csv(INF_filt %>% distinct(SampleID), "Original_filt.csv")
# Functions  ------------------------------------------------------------
####Load Libraries====
libs_load <- function(x){
for( i in x ){
print(paste0("Checking for library: ", i))
if(require( i , character.only = TRUE ) ){
print(paste0(i, " already installed. Loading now"))
}
#  require returns TRUE invisibly if it was able to load package
if( ! require( i , character.only = TRUE ) ){
print(paste0(i, " not installed. Trying CRAN for install."))
#  If package was not able to be loaded then re-install
install.packages( i , dependencies = TRUE )
require( i , character.only = TRUE )
paste0(i, " installed and loaded successfully")
}
if ( ! require(i, character.only=TRUE) ) {
paste0(i," could not be installed from CRAN. Trying Bionconductor....")
BiocManager::install(i)
require( i , character.only = TRUE )
paste0(i, " installed and loaded successfully")
}
if ( ! require(i, character.only=TRUE) ) {
paste0(i, "could not be installed. Check manually")
}
#  Load package after installing
}
}
#Usage:
#libs_load(c("...", "..."))
###Create PC1 PC2 PC3 PCA Plot Strip (FactoExtra)====
create_pca_plots <- function(pca_result, df, label_col, title) {
# Convert label column to factor
label_factor <- as.factor(df[[label_col]])
# Create PCA plots for different axes
pca_plot1 <- fviz_pca_ind(pca_result, habillage = label_factor,title="", axes = c(1, 2))
pca_plot2 <- fviz_pca_ind(pca_result, habillage = label_factor,title="", axes = c(1, 3))
pca_plot3 <- fviz_pca_ind(pca_result, habillage = label_factor,title="", axes = c(2, 3))
# Arrange the plots in a 3x1 grid with a title
combined_plot <- grid.arrange(pca_plot1, pca_plot2, pca_plot3, nrow = 1, top = textGrob(title, gp = gpar(fontsize = 14, font = 2)))
return(combined_plot)
}
# Example usage:
# Assuming 'NArm_Merged_PCA' is your PCA result and 'NArm_Merged_df' is your data frame
# result <- create_pca_plots(NArm_Merged_PCA, NArm_Merged_df, "Age_bin", "PCA Plot of Age Bins")
# print(result)
###Calculate RLE function====
calcRLE <- function(E, log.data = TRUE, metadata.cols = NULL) {
if (!inherits(E, what = "data.frame")) {
stop("E must be a data.frame")
}
# Separate metadata columns if specified
if (!is.null(metadata.cols)) {
metadata <- E[, metadata.cols, drop = FALSE]
E <- E[, !colnames(E) %in% metadata.cols]
} else {
metadata <- NULL
}
# Log the data if specified
if (log.data == TRUE) {
message("Logging the data")
E <- log2(E + 1)
}
# Calculate the median value of log2 counts for each gene (column)
g.medians <- apply(E, 2, FUN = median, na.rm = TRUE)
# For each gene (column), subtract its median
E.new <- sweep(E, 2, g.medians, FUN = "-")
# Re-add metadata columns if they were separated
if (!is.null(metadata)) {
E.new <- cbind(metadata, E.new)
}
return(E.new)
}
# Example usage:
# Assuming 'gene_expression_data' is your data frame and 'c("SampleID", "Age", "Gender")' are your metadata columns
# result <- calcRLE(gene_expression_data, log.data = TRUE, metadata.cols = c("SampleID", "Age", "Gender"))
###Create RLE Boxplot (GGplot)====
create_rle_boxplot <- function(rle_data, metadata_cols, color_col,title) {
# Check if the metadata and color columns exist
if (!all(metadata_cols %in% colnames(rle_data))) {
stop("One or more specified metadata columns do not exist in the data frame.")
}
if (!(color_col %in% metadata_cols)) {
stop("The specified color column must be one of the metadata columns.")
}
# Convert RLE data to long format for plotting
rle_long <- rle_data %>%
pivot_longer(cols = -all_of(metadata_cols), names_to = "Gene_Symbol", values_to = "NPX")
# Create plotting order variables for each sample, plot in order of global medians
plot_order <- rle_long %>%
group_by(SampleID) %>%
summarise(median_NPX = median(NPX, na.rm = TRUE)) %>%
arrange(desc(median_NPX)) %>%
pull(SampleID)
# Calculate median for horizontal line on plot
overall_median <- median(na.omit(rle_long$NPX))
# Create the boxplot
plot <- ggplot(rle_long, aes(x = SampleID, y = NPX, fill = !!sym(color_col))) +
geom_boxplot(outlier.colour = "black", outlier.size = 0.05) +
scale_x_discrete(limits = plot_order) +
geom_hline(yintercept = overall_median, linetype = "dashed", colour = "red") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size = 5, hjust = 1)) +
ylab("Relative Log Abundance") +
xlab("") +
ggtitle(title)
return(plot)
}
# Example usage:
# Assuming 'gene_expression_data' is your data frame and 'c("SampleID", "PlateID")' are your metadata columns
# rle_data <- calcRLE(gene_expression_data, log.data = TRUE, metadata.cols = c("SampleID", "PlateID"))
# plot <- create_rle_boxplot(rle_data, metadata_cols = c("SampleID", "PlateID"), color_col = "PlateID",title="RLE - Inflammation Panel - Plate ID)
# print(plot)
###Function to remove the batch effect using a linear model====
adjust_batch_effect <- function(data, batch_col = "Batch", metadata_cols = c("SampleID", "PlateID", "Batch")) {
# Ensure the data is a data frame
if (!inherits(data, what = "data.frame")) {
stop("Data must be a data.frame")
}
# Ensure the specified batch column exists in the data frame
if (!(batch_col %in% colnames(data))) {
stop("The specified batch column does not exist in the data frame.")
}
# Initialize a list to store the linear model residuals
lmfit <- vector('list', ncol(data[, !(colnames(data) %in% metadata_cols)]))
names(lmfit) <- colnames(data[, !(colnames(data) %in% metadata_cols)])
# Loop through each protein column and fit a linear model
for (i in seq_along(lmfit)) {
lmfit[[i]] <- summary(lm(data[[names(lmfit)[i]]] ~ data[[batch_col]]))$residuals
}
# Create an empty data frame to store the adjusted values
adjusted_data <- data.frame(matrix(nrow = nrow(data), ncol = length(names(lmfit))))
colnames(adjusted_data) <- names(lmfit)
rownames(adjusted_data) <- rownames(data)
# Fill the adjusted data frame with the residuals
for (i in seq_along(lmfit)) {
adjusted_data[, i] <- lmfit[[i]]
}
# Re-add the metadata columns to the adjusted data frame
adjusted_data <- cbind(data[, metadata_cols], adjusted_data)
return(adjusted_data)
}
# Example usage: adjusted_data <- adjust_batch_effect(INF_df, batch_col = "Batch", metadata_cols = c("SampleID", "PlateID", "Batch"))
# Assuming 'INF_df' is your data frame
# Libraries  ------------------------------------------------------------
libs_load(c("OlinkAnalyze", "tidyverse", "FactoMineR", "factoextra", "gridExtra", "RColorBrewer", "ggplot2","grid", "this.path"))
# Set up file paths & output directories  ------------------------------------------------------------
# Root
setwd(this.path::here())
QC_ROOT= this.path::here()
# Input
INPUT_DIR<-paste0(QC_ROOT, "/Input_Data")
# Output directories
OUTPUT_DIR <- paste0(QC_ROOT, "/Output")
# Check if the Output directory exists (Avoids overwriting)
if (!dir.exists(OUTPUT_DIR)) {
# If it doesn't exist, create the directory
dir.create(OUTPUT_DIR, recursive = TRUE)
message("Directory created: ", OUTPUT_DIR)
} else {
message("Directory already exists: ", OUTPUT_DIR)
}
#Directory for investigating possible batch Inflammation Batch Effect
INF_PRE_DIR <- paste0(OUTPUT_DIR, "/INF_Pre_BatchAdjust")
if (!dir.exists(INF_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(INF_PRE_DIR, recursive = TRUE)
message("Directory created: ", INF_PRE_DIR)
} else {
message("Directory already exists: ", INF_PRE_DIR)
}
#Directory for confirming nil Cardiometabolic Batch Effect
CDM_PRE_DIR <- paste0(OUTPUT_DIR, "/CDM_Pre_BatchAdjust")
if (!dir.exists(CDM_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(CDM_PRE_DIR, recursive = TRUE)
message("Directory created: ", CDM_PRE_DIR)
} else {
message("Directory already exists: ", CDM_PRE_DIR)
}
#Directory for INF & CDM Combined QC
BOTH_POST_DIR <- paste0(OUTPUT_DIR, "/INF&CDM_post_BatchAdjust")
if (!dir.exists(BOTH_POST_DIR)) {
# If it doesn't exist, create the directory
dir.create(BOTH_POST_DIR, recursive = TRUE)
message("Directory created: ", BOTH_POST_DIR)
} else {
message("Directory already exists: ", BOTH_POST_DIR)
}
##INF & CDM Combined QC PCAs
POST_PCA_DIR <- paste0(BOTH_POST_DIR, "/PCA")
if (!dir.exists(POST_PCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_PCA_DIR, recursive = TRUE)
message("Directory created: ", POST_PCA_DIR)
} else {
message("Directory already exists: ", POST_PCA_DIR)
}
##INF & CDM Combined QC RLEs
POST_RLE_DIR <- paste0(BOTH_POST_DIR, "/RLE")
if (!dir.exists(POST_RLE_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_RLE_DIR, recursive = TRUE)
message("Directory created: ", POST_RLE_DIR)
} else {
message("Directory already exists: ", POST_RLE_DIR)
}
# Inflammation Panel QC and Batch effect --------------------------------
#Because of a known technical issue with INF plates, initially reading in and looking at INF data separately
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort1_INF_Plate1_Raw.xlsx"))
INF_p2to4<-read_NPX(paste0(INPUT_DIR,"/Cohort2_CDM_Plate2to4_Raw.xlsx"))
Olink_Assays <- read.csv(paste0(INPUT_DIR,"/Olink_Assays.csv"))
#Check sample numbers in each
INF_p1 %>% distinct(SampleID) %>% nrow()
INF_p2to4 %>% distinct(SampleID) %>% nrow()
####Merge P1 & P2-P4 data frames and add gene symbols ====
INF_raw<- bind_rows(INF_p1, INF_p2to4)
INF_raw %>% distinct(SampleID) %>% nrow()
#add gene symbols
INF_raw<-INF_raw %>% left_join(Olink_Assays, by = "Assay")
####Filter out Un-needed control samples & assays ====
#Remove internal PP, IPC and Neg controls (used in Olink QC but not needed here)
INF_filt <- INF_raw %>% filter(!str_detect(SampleID, c("PP|IPC|Neg")))
#Remove any control assays, these are used by Olink analyze software but are not needed by us
INF_filt <- INF_filt %>% filter(!str_detect(Assay, "Ctrl"))#Remove internal controls
#Check number of samples and assays in filtered data frame
INF_filt %>% distinct(SampleID) %>% nrow()
INF_filt%>% distinct(Assay) %>% nrow()
INF_filt%>% distinct(Gene_Symbol) %>% nrow()
setwd("C:/Users/robma/OneDrive/Desktop")
write.csv(INF_filt %>% distinct(SampleID), "New_filt.csv")
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort1_INF_Plate1_Raw.xlsx"))
setwd(this.path::here())
QC_ROOT= this.path::here()
# Input
INPUT_DIR<-paste0(QC_ROOT, "/Input_Data")
# Output directories
OUTPUT_DIR <- paste0(QC_ROOT, "/Output")
# Check if the Output directory exists (Avoids overwriting)
if (!dir.exists(OUTPUT_DIR)) {
# If it doesn't exist, create the directory
dir.create(OUTPUT_DIR, recursive = TRUE)
message("Directory created: ", OUTPUT_DIR)
} else {
message("Directory already exists: ", OUTPUT_DIR)
}
#Directory for investigating possible batch Inflammation Batch Effect
INF_PRE_DIR <- paste0(OUTPUT_DIR, "/INF_Pre_BatchAdjust")
if (!dir.exists(INF_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(INF_PRE_DIR, recursive = TRUE)
message("Directory created: ", INF_PRE_DIR)
} else {
message("Directory already exists: ", INF_PRE_DIR)
}
#Directory for confirming nil Cardiometabolic Batch Effect
CDM_PRE_DIR <- paste0(OUTPUT_DIR, "/CDM_Pre_BatchAdjust")
if (!dir.exists(CDM_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(CDM_PRE_DIR, recursive = TRUE)
message("Directory created: ", CDM_PRE_DIR)
} else {
message("Directory already exists: ", CDM_PRE_DIR)
}
#Directory for INF & CDM Combined QC
BOTH_POST_DIR <- paste0(OUTPUT_DIR, "/INF&CDM_post_BatchAdjust")
if (!dir.exists(BOTH_POST_DIR)) {
# If it doesn't exist, create the directory
dir.create(BOTH_POST_DIR, recursive = TRUE)
message("Directory created: ", BOTH_POST_DIR)
} else {
message("Directory already exists: ", BOTH_POST_DIR)
}
##INF & CDM Combined QC PCAs
POST_PCA_DIR <- paste0(BOTH_POST_DIR, "/PCA")
if (!dir.exists(POST_PCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_PCA_DIR, recursive = TRUE)
message("Directory created: ", POST_PCA_DIR)
} else {
message("Directory already exists: ", POST_PCA_DIR)
}
##INF & CDM Combined QC RLEs
POST_RLE_DIR <- paste0(BOTH_POST_DIR, "/RLE")
if (!dir.exists(POST_RLE_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_RLE_DIR, recursive = TRUE)
message("Directory created: ", POST_RLE_DIR)
} else {
message("Directory already exists: ", POST_RLE_DIR)
}
# Inflammation Panel QC and Batch effect --------------------------------
#Because of a known technical issue with INF plates, initially reading in and looking at INF data separately
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort1_INF_Plate1_Raw.xlsx"))
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort2_INF_Plate1_Raw.xlsx"))
# Set up file paths & output directories  ------------------------------------------------------------
# Root
setwd(this.path::here())
QC_ROOT= this.path::here()
# Input
INPUT_DIR<-paste0(QC_ROOT, "/Input_Data")
# Output directories
OUTPUT_DIR <- paste0(QC_ROOT, "/Output")
# Check if the Output directory exists (Avoids overwriting)
if (!dir.exists(OUTPUT_DIR)) {
# If it doesn't exist, create the directory
dir.create(OUTPUT_DIR, recursive = TRUE)
message("Directory created: ", OUTPUT_DIR)
} else {
message("Directory already exists: ", OUTPUT_DIR)
}
#Directory for investigating possible batch Inflammation Batch Effect
INF_PRE_DIR <- paste0(OUTPUT_DIR, "/INF_Pre_BatchAdjust")
if (!dir.exists(INF_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(INF_PRE_DIR, recursive = TRUE)
message("Directory created: ", INF_PRE_DIR)
} else {
message("Directory already exists: ", INF_PRE_DIR)
}
#Directory for confirming nil Cardiometabolic Batch Effect
CDM_PRE_DIR <- paste0(OUTPUT_DIR, "/CDM_Pre_BatchAdjust")
if (!dir.exists(CDM_PRE_DIR)) {
# If it doesn't exist, create the directory
dir.create(CDM_PRE_DIR, recursive = TRUE)
message("Directory created: ", CDM_PRE_DIR)
} else {
message("Directory already exists: ", CDM_PRE_DIR)
}
#Directory for INF & CDM Combined QC
BOTH_POST_DIR <- paste0(OUTPUT_DIR, "/INF&CDM_post_BatchAdjust")
if (!dir.exists(BOTH_POST_DIR)) {
# If it doesn't exist, create the directory
dir.create(BOTH_POST_DIR, recursive = TRUE)
message("Directory created: ", BOTH_POST_DIR)
} else {
message("Directory already exists: ", BOTH_POST_DIR)
}
##INF & CDM Combined QC PCAs
POST_PCA_DIR <- paste0(BOTH_POST_DIR, "/PCA")
if (!dir.exists(POST_PCA_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_PCA_DIR, recursive = TRUE)
message("Directory created: ", POST_PCA_DIR)
} else {
message("Directory already exists: ", POST_PCA_DIR)
}
##INF & CDM Combined QC RLEs
POST_RLE_DIR <- paste0(BOTH_POST_DIR, "/RLE")
if (!dir.exists(POST_RLE_DIR)) {
# If it doesn't exist, create the directory
dir.create(POST_RLE_DIR, recursive = TRUE)
message("Directory created: ", POST_RLE_DIR)
} else {
message("Directory already exists: ", POST_RLE_DIR)
}
# Inflammation Panel QC and Batch effect --------------------------------
#Because of a known technical issue with INF plates, initially reading in and looking at INF data separately
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort2_INF_Plate1_Raw.xlsx"))
### Read in INF Data and filter out controls ----
#Read in wide format NPX Target data using read_NPX function from Olink Analyze. Also read in Olink assay annotation
INF_p1<-read_NPX(paste0(INPUT_DIR,"/Cohort2_INF_Plate1_Raw.xlsx"))
INF_p2to4<-read_NPX(paste0(INPUT_DIR,"/Cohort2_CDM_Plate2to4_Raw.xlsx"))
INF_p2to4<-read_NPX(paste0(INPUT_DIR,"/Cohort2_INF_Plate2to4_Raw.xlsx"))
Olink_Assays <- read.csv(paste0(INPUT_DIR,"/Olink_Assays.csv"))
INF_p1 %>% distinct(SampleID) %>% nrow()
INF_p2to4 %>% distinct(SampleID) %>% nrow()
INF_raw<- bind_rows(INF_p1, INF_p2to4)
INF_raw %>% distinct(SampleID) %>% nrow()
